# -*- coding: utf-8 -*-
"""Thesis_Research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ex0tsduNbxx_ZLOL_5ndd2DC_fEKNU49
"""

import pandas as pd
import matplotlib.pyplot as plt

data = {
    'Case Study': ['A - Finance', 'B - Healthcare', 'C - E-Commerce'],
    'Uptime Before (%)': [97.00, 96.50, 95.00],
    'Uptime After (%)': [99.99, 99.95, 99.90],
    'RTO Before (min)': [30, 45, None],
    'RTO After (sec)': [60, 30, None],
    'Operational Reduction (%)': [70, None, None],
    'Cost Savings (%)': [None, 35, None],
    'Downtime Reduction (%)': [None, None, 85],
    'Replica Scaling': [0, 0, 1]  # 0 = No, 1 = Yes
}

df = pd.DataFrame(data)


# Uptime Before Vs After
fig1, ax1 = plt.subplots()
df[['Uptime Before (%)', 'Uptime After (%)']].plot(kind='bar', ax=ax1)
ax1.set_xticks(range(len(df)))
ax1.set_xticklabels(df['Case Study'])
ax1.set_title('Uptime Before vs After Migration')
ax1.set_ylabel('Uptime (%)')
plt.tight_layout()

# RTO Before vs After (converted to unit - minutes)
rto_df = df.copy()
rto_df['RTO After (min)'] = rto_df['RTO After (sec)'].apply(lambda x: x / 60 if pd.notnull(x) else None)
fig2, ax2 = plt.subplots()
rto_df[['RTO Before (min)', 'RTO After (min)']].plot(kind='bar', ax=ax2)
ax2.set_xticks(range(len(rto_df)))
ax2.set_xticklabels(rto_df['Case Study'])
ax2.set_title('Recovery Time Objective (RTO) Before vs After')
ax2.set_ylabel('Time (Minutes)')
plt.tight_layout()

# Operational Effort & Cost Savings
fig3, ax3 = plt.subplots()
op_cost_df = df[['Case Study', 'Operational Reduction (%)', 'Cost Savings (%)']].set_index('Case Study')
op_cost_df.plot(kind='bar', ax=ax3)
ax3.set_title('Operational Effort & Cost Savings')
ax3.set_ylabel('Percent Reduction')
plt.tight_layout()

# Downtime Reduction
fig4, ax4 = plt.subplots()
downtime_df = df[['Case Study', 'Downtime Reduction (%)']].dropna()
downtime_df.set_index('Case Study').plot(kind='bar', ax=ax4, legend=False)
ax4.set_title('Downtime Reduction After Migration')
ax4.set_ylabel('Reduction (%)')
plt.tight_layout()

# Replica Scaling Used
fig5, ax5 = plt.subplots()
scaling_counts = df['Replica Scaling'].value_counts().rename({0: 'Not Used', 1: 'Used'})
scaling_counts.plot(kind='pie', autopct='%1.0f%%', ax=ax5)
ax5.set_ylabel('')
ax5.set_title('Replica Scaling Usage')
plt.tight_layout()

# Show all charts
plt.show()

# RTO Before vs After (converted to  unit - minutes)
rto_df = df.copy()
rto_df['RTO After (min)'] = rto_df['RTO After (sec)'].apply(lambda x: x / 60 if pd.notnull(x) else None)
fig2, ax2 = plt.subplots()
rto_df[['RTO Before (min)', 'RTO After (min)']].plot(kind='bar', ax=ax2)
ax2.set_xticks(range(len(rto_df)))
ax2.set_xticklabels(rto_df['Case Study'])
ax2.set_title('Recovery Time Objective (RTO) Before vs After')
ax2.set_ylabel('Time (Minutes)')
plt.tight_layout()

# Operational Effort & Cost Savings
fig3, ax3 = plt.subplots()
op_cost_df = df[['Case Study', 'Operational Reduction (%)', 'Cost Savings (%)']].set_index('Case Study')
op_cost_df.plot(kind='bar', ax=ax3)
ax3.set_title('Operational Effort & Cost Savings')
ax3.set_ylabel('Percent Reduction')
plt.tight_layout()

# Uptime Before vs After
fig1, ax1 = plt.subplots()
df[['Uptime Before (%)', 'Uptime After (%)']].plot(kind='bar', ax=ax1)
ax1.set_xticks(range(len(df)))
ax1.set_xticklabels(df['Case Study'])
ax1.set_title('Uptime Before vs After Migration')
ax1.set_ylabel('Uptime (%)')
plt.tight_layout()

"""."""